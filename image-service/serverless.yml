# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: pt360-image-service

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  createEvent:
    handler: handler.createEvent
    events:
      - http:
          path: api/v1/users/{userId}/events/
          method: post
          cors: true

  updateEvent:
    handler: handler.updateEvent
    events:
      - http:
          path: api/v1/users/{userId}/events/
          method: put
          cors: true

  deleteEvent:
    handler: handler.deleteEvent
    events:
      - http:
          path: api/v1/users/{userId}/events/{eventId}
          method: delete
          cors: true

  getEventById:
    handler: handler.getEventById
    events:
      - http:
          path: api/v1/users/{userId}/events/{eventId}
          method: get
          cors: true

  getEvents:
    handler: handler.getEvents
    events:
      - http:
          path: api/v1/users/{userId}/events/
          method: get
          cors: true

  createImage:
    handler: handler.createImage
    events:
      - http:
          path: api/v1/users/{userId}/events/{eventId}/images/
          method: post
          cors: true

  updateImage:
    handler: handler.updateImage
    events:
      - http:
          path: api/v1/users/{userId}/events/{eventId}/images/
          method: put
          cors: true

  deleteImage:
    handler: handler.deleteImage
    events:
      - http:
          path: api/v1/users/{userId}/events/{eventId}/images/{imageId}
          method: delete
          cors: true

  getImageById:
    handler: handler.getImageById
    events:
      - http:
          path: api/v1/users/{userId}/events/{eventId}/images/{imageId}
          method: get
          cors: true
  
  getImages:
    handler: handler.getImages
    events:
      - http:
          path: api/v1/users/{userId}/events/{eventId}/images/
          method: get
          cors: true

  createEventPassword:
    handler: handler.createEventPassword
    events:
      - http:
          path: api/v1/users/{userId}/events/{eventId}/passwords/
          method: post
          cors: true

  updateEventPassword:
    handler: handler.updateEventPassword
    events:
      - http:
          path: api/v1/users/{userId}/events/{eventId}/passwords/
          method: put
          cors: true

  validateEventPassword:
    handler: handler.validateEventPassword
    events:
      - http:
          path: api/v1/users/{userId}/events/{eventId}/validate
          method: put
          cors: true

  deleteEventPassword:
    handler: handler.deleteEventPassword
    events:
      - http:
          path: api/v1/users/{userId}/events/{eventId}/passwords/
          method: delete
          cors: true

  getEventPassword:
    handler: handler.getEventPassword
    events:
      - http:
          path: api/v1/users/{userId}/events/{eventId}/passwords/
          method: get
          cors: true

  getEventCount:
    handler: handler.getEventCount
    events:
      - http:
          path: api/v1/users/{userId}/events/counts
          method: get
          cors: true

  getImageCount:
    handler: handler.getImageCount
    events:
      - http:
          path: api/v1/users/{userId}/images/counts
          method: get
          cors: true
  createPayment:
    handler: handler.createPayment
    events:
      - http:
          path: api/v1/users/{userId}/paymants/create
          method: post
          cors: true

  getPaymentById:
    handler: handler.getPaymentById
    events:
      - http:
          path: api/v1/users/{userId}/payments/{paymentId}
          method: get
          cors: true

  getPaymentByOrderId:
    handler: handler.getPaymentByOrderId
    events:
      - http:
          path: api/v1/users/{userId}/orders/{orderId}
          method: get
          cors: true

  getPaymentByUserId:
    handler: handler.getPaymentByUserId
    events:
      - http:
          path: api/v1/users/{userId}/payments/
          method: get
          cors: true


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
